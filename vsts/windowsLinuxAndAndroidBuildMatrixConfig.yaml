name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

jobs:
  - job: AndroidTest
    timeoutInMinutes: 80
    pool:
      vmImage: 'macOS-latest'
    strategy:
      maxParallel: 3
      matrix:
        TestGroup1:
          ANDROID_TEST_GROUP_ID: TestGroup1
        TestGroup2:
          ANDROID_TEST_GROUP_ID: TestGroup2
        TestGroup3:
          ANDROID_TEST_GROUP_ID: TestGroup3
        TestGroup4:
          ANDROID_TEST_GROUP_ID: TestGroup4

    displayName: Android Test
    steps:
      - task: PowerShell@2
        displayName: 'determine if testing needed'
        condition: always()
        inputs:
          targetType: 'filePath'
          filePath: ./vsts/determine_if_android_test_group_needs_to_run.ps1
        env:
          TEST_GROUP_ID: $(ANDROID_TEST_GROUP_ID)
          IS_BASIC_TIER_HUB: $(IS-BASIC-TIER-HUB)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)

      # Android emulator is not ready to use after this task completes. Later on a task will wait for the android emulator
      # to be ready to use before continuing. Since starting the emulator can be done in a background thread, we'll check
      # back on it later after building the test APKs
      - task: Bash@3
        condition: eq(variables['task.android.needToRunTestGroup'], 'yes')
        displayName: 'Asynchronously Start Android Emulator'
        timeoutInMinutes: 10
        continueOnError: false
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/vsts/StartEmulatorAsync.sh'

      - powershell: ./vsts/build_e2e_tests.cmd
        displayName: 'E2E Tests Build'
        condition: always()

      - powershell: ./vsts/gradle_build.cmd
        displayName: 'Gradle Build'
        env:
          IOTHUB_CONNECTION_STRING: $(ANDROID-IOTHUB-CONNECTION-STRING)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DEVICE_PROVISIONING_SERVICE_ID_SCOPE: $(ANDROID-IOT-DPS-ID-SCOPE)
          IOT_DPS_CONNECTION_STRING: $(ANDROID-IOT-DPS-CONNECTION-STRING)
          INVALID_DEVICE_PROVISIONING_SERVICE_GLOBAL_ENDPOINT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          INVALID_DEVICE_PROVISIONING_SERVICE_CONNECTION_STRING: $(IOTHUB-CONN-STRING-INVALIDCERT)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          FAR_AWAY_IOTHUB_CONNECTION_STRING: $(FAR-AWAY-IOTHUB-CONNECTION-STRING)
          IS_BASIC_TIER_HUB: $(IS-BASIC-TIER-HUB)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
        condition: always()

      - task: Bash@3
        condition: eq(variables['task.android.needToRunTestGroup'], 'yes')
        displayName: 'Wait For Android Emulator To Start'
        timeoutInMinutes: 30
        continueOnError: false
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/vsts/WaitForEmulatorToBeReady.sh'

      - task: Bash@3
        #only run tests on emulator if tests should be run, and if the emulator boot up was successful
        condition: and(succeeded(), eq(variables['task.android.needToRunTestGroup'], 'yes'))
        displayName: 'Run tests on emulator'
        timeoutInMinutes: 45
        inputs:
          targetType: 'filePath'
          filePath: '$(Build.SourcesDirectory)/vsts/RunTestsOnEmulator.sh'
        env:
          TEST_GROUP_ID: $(ANDROID_TEST_GROUP_ID)